commit e46115516012f248f7f21a4c16d7da2badaa8594 (tag: 0.1.0)
Author: Jameskaewanan <jameskwnn@gmail.com>
Date:   Wed Jun 9 22:21:06 2021 +0700

    Version 0.1.0

diff --git a/icws b/icws
deleted file mode 100644
index 315fbe1..0000000
Binary files a/icws and /dev/null differ
diff --git a/obj/icws.o b/obj/icws.o
index 307c0b3..fcaf787 100644
Binary files a/obj/icws.o and b/obj/icws.o differ
diff --git a/sample-www/cat.jpg b/sample-www/cat.jpg
new file mode 100644
index 0000000..8972091
Binary files /dev/null and b/sample-www/cat.jpg differ
diff --git a/sample-www/index.html b/sample-www/index.html
new file mode 100644
index 0000000..90088bc
--- /dev/null
+++ b/sample-www/index.html
@@ -0,0 +1,21 @@
+<html>
+<head>
+    <title>Test Page</title>
+    <style>
+body {
+    font-family: Helvetica, Arial;
+    margin: 20px;
+}
+    </style>
+</head>
+<body>
+    <h1>Hello, World!</h1>
+
+    <p>Serving this from our very own web server!</p>
+
+
+    If the MIME type is set up correctly, you should be able to see an image below as well:<br />
+    <img src="cat.jpg" width="480px" alt="Cat">
+    <img src="PM.jpg" width="480px" alt="PM">
+
+</body>
+</html>
diff --git a/src/icws.c b/src/icws.c
index cea3883..b8a8894 100644
--- a/src/icws.c
+++ b/src/icws.c
@@ -9,11 +9,132 @@
 #include <fcntl.h>
 #include "connection.h"

-#define MAXBUFF 8192
+#define MAXBUF 8192

-int main(int argc, char *argv[]) {
+int main (int argc, char* argv[]) {

-    printf("hello\n");
+typedef struct sockaddr SA;

+void write_logic(int connFd, int outputFd)
+{
+    ssize_t bytesRead;
+    char buf[MAXBUF];
+
+    while ((bytesRead = read(connFd, buf, MAXBUF)) > 0)
+    {
+        ssize_t numToWrite = bytesRead;
+        char *writeBuf = buf;
+        while (numToWrite > 0)
+        {
+            ssize_t numWritten = write(outputFd, writeBuf, numToWrite);
+            if (numWritten < 0)
+            {
+                fprintf(stderr, "ERROR writing, meh\n");
+                break;
+            }
+            numToWrite -= numWritten;
+            writeBuf += numWritten;
+        }
+    }
+    printf("DEBUG: Connection closed\n");
+}
+void respond_all(int connFd, char *uri, char *mime)
+{
+    char buf[MAXBUF];
+    int uriFd = open(uri, O_RDONLY);
+    char *msg = "404 Not Found";
+    if (uriFd < 0)
+    {
+        sprintf(buf,
+                "HTTP/1.1 404 Not Found\r\n"
+                "Server: Micro\r\n"
+                "Connection: close\r\n\r\n");
+        write_all(connFd, buf, strlen(buf));
+        write_all(connFd, msg, strlen(msg));
+        return;
+    }
+    struct stat fstatbuf;
+    fstat(uriFd, &fstatbuf);
+    sprintf(buf,
+            "HTTP/1.1 200 OK\r\n"
+            "Server: Micro\r\n"
+            "Connection: close\r\n"
+            "Content-length: %lu\r\n"
+            "Content-type: %s\r\n\r\n",
+            fstatbuf.st_size, mime);
+    write_all(connFd, buf, strlen(buf));
+    write_logic(uriFd, connFd);
+}
+
+void serve_http(int connFd, char *rootFolder)
+{
+    char buf[MAXBUF];
+
+
+    if (!read_line(connFd, buf, MAXBUF))
+        return; /* Quit if we can't read the first line */
+    /* [METHOD] [URI] [HTTPVER] */
+    char method[MAXBUF], uri[MAXBUF], httpVer[MAXBUF];
+    sscanf(buf, "%s %s %s", method, uri, httpVer);
+    char newPath[80];
+    if (strcasecmp(method, "GET") == 0)
+    {
+        if (uri[0] == '/')
+        {
+            sprintf(newPath, "%s%s", rootFolder, uri);
+            if (strstr(uri, "html") != NULL)
+            {
+                respond_all(connFd, newPath, "text/html");
+            }
+            else if (strstr(uri, "jpg") != NULL || strstr(uri, "jpeg") != NULL)
+            {
+                respond_all(connFd, newPath, "image/jpeg");
+            }
+            else
+            {
+                respond_all(connFd, newPath, NULL);
+            }
+        }
+    }
+    else
+    {
+        // respond_all(connFd, newPath, NULL);
+        printf("LOG: Unknown request\n");
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    int listenFd = open_listenfd(argv[2]);
+    char *rootFolder = argv[4];
+
+    for (;;)
+    {
+        struct sockaddr_storage clientAddr;
+        socklen_t clientLen = sizeof(struct sockaddr_storage);
+
+        int connFd = accept(listenFd, (SA *)&clientAddr, &clientLen);
+        printf("connFd: %d", connFd);
+        if (connFd < 0)
+        {
+            fprintf(stderr, "Failed to accept\n");
+            continue;
+        }
+
+        char hostBuf[MAXBUF], svcBuf[MAXBUF];
+        if (getnameinfo((SA *)&clientAddr, clientLen,
+                        hostBuf, MAXBUF, svcBuf, MAXBUF, 0) == 0)
+            printf("Connection from %s:%s\n", hostBuf, svcBuf);
+        else
+            printf("Connection from ?UNKNOWN?\n");
+
+        serve_http(connFd, rootFolder);
+        close(connFd);
+    }
+
+    return 0;
 }

+
+
+}
+        if (connFd < 0)
+        {
+            fprintf(stderr, "Failed to accept\n");
+            continue;
+        }
+
+        char hostBuf[MAXBUF], svcBuf[MAXBUF];
+        if (getnameinfo((SA *)&clientAddr, clientLen,
+                        hostBuf, MAXBUF, svcBuf, MAXBUF, 0) == 0)
+            printf("Connection from %s:%s\n", hostBuf, svcBuf);
+        else
+            printf("Connection from ?UNKNOWN?\n");
+
+        serve_http(connFd, rootFolder);
+        close(connFd);
+    }
+
+    return 0;
 }

+
+
+}
(END)
